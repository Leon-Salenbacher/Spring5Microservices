package com.spring5microservices.common.dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;

import java.io.Serializable;
import java.util.Map;

/**
 * Required information to send as response in the {@code login} request
 */
@AllArgsConstructor
@Builder
@EqualsAndHashCode(of = { "jwtId" })
@Data
@NoArgsConstructor
@Schema(description = "Returned data after authenticate a user")
public class AuthenticationInformationDto implements Serializable {

    private static final long serialVersionUID = -4007535195077048326L;

    @Schema(required = true, description = "Identifier of every authentication information instance. Usually a UUID autogenerated value")
    @JsonProperty(value = "jti")
    private String jwtId;

    @Schema(required = true, description = "Token-based authentication to allow an application to access the microservices")
    @JsonProperty(value = "access_token")
    private String accessToken;

    @Schema(required = true, description = "Access token expiration time in seconds")
    @JsonProperty(value = "expires_in")
    private int expiresIn;

    @Schema(required = true, description = "Special token used to obtain additional access tokens")
    @JsonProperty(value = "refresh_token")
    private String refreshToken;

    @Schema(required = true, description = "What type is the provided access token. For example: Bearer")
    @JsonProperty(value = "token_type")
    private String tokenType;

    @Schema(description = "Values related with the internal mechanism to limit an application's access to a user's account")
    private String scope;

    @Schema(description = "Extra data returned by security service")
    private Map<String, Object> additionalInfo;

}
